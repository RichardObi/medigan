# -*- coding: utf-8 -*-
# ! /usr/bin/env python
""" `SyntheticDataset` allows to return a generative model as torch dataset. """

from torch.utils.data import Dataset


class SyntheticDataset(Dataset):
    """A synthetic dataset containing data generated by a model of medigan

    Parameters
    ----------
    syn_data: list
        List of data points in the dataset e.g. generated images as numpy array.
    labels: list
        list of labels, if applicable, pertaining to the `syn_data` items
    masks: list
        List of segmentation masks, if applicable,  pertaining to the `syn_data` items
    transform:
        torch compose transform functions that are applied to the torch dataset.

    Attributes
    ----------
    syn_data: list
        List of data points in the dataset e.g. generated images as numpy array.
    labels: list
        list of labels, if applicable, pertaining to the `syn_data` items
    masks: list
        List of segmentation masks, if applicable,  pertaining to the `syn_data` items
    transform:
        torch compose transform functions that are applied to the torch dataset.
    """

    def __init__(self, data, labels=None, masks=None, transform=None):
        self.data = data
        self.labels = labels
        self.masks = masks
        self.transform = transform

    def __getitem__(self, index):
        x = self.data[index]
        y = self.labels[index] if self.labels is not None else None
        mask = self.masks[index] if self.masks is not None else None

        if self.transform:
            if mask is not None:
                # transform needs to be applied to both mask and image.
                x, mask = self.transform(x, mask)
            x = self.transform(x)
        item = {"sample": x}  # extendable dictionary
        if y is not None:
            item["label"] = y
        if mask is not None:
            item["mask"] = mask
        return item

    def __len__(self):
        return len(self.data)
